

<section
  class="product-recommendations"
  data-section-id="product-recomendations"
  data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4"
>
  {%- if recommendations.performed and recommendations.products_count > 0 -%}
  <div class="gc">
    <div class="d-1-4 t-1-7 r-1-3 m-1-13 t-r-1">
      {% if section.settings.recommended_products_title != blank %}
        {% include 'heading', text: section.settings.recommended_products_title %}
      {% endif %}
    </div>
    {% if section.settings.cta_link %}
    <div class="d-7-13 m-1-13 flex flex-to-right">
            {% include 'button',
                url: section.settings.cta_link,
                text: section.settings.cta_text,
                type: 'text-link next'
            %}
    </div>
    {% endif %}
    
    {% for product in recommendations.products %}
      {% if forloop.index <= section.settings.recommended_products_count %}
        <div class="span-3 t-span-4 m-span-6">
          {% include 'card',
              context: 'product',
              imageFile: product.featured_image,
              userSetAspectRatio: 'ratio-1-1',
              title: product.title,
              cta_url: product.url,
              cta_text: 'SHOP NOW'
          %}
        </div>
      {% endif %}
    {% endfor %}
  </div>
{%- endif -%}
</section>

{% javascript %}
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;

    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');
        recommendations.innerHTML = text;
        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
          // Fire lazyload for async images
          var lazyLoadInstance = new LazyLoad({
            elements_selector: "img"
          });
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
  {
    "name": "Product recommendations",
    "settings": [
      {
        "type": "textarea",
        "id": "recommended_products_title",
        "label": "Title",
        "default": "Other Products we think you might like"
      },
      {
        "type": "url",
        "id": "cta_link",
        "label": "Button Link"
      },
      {
          "type": "text",
          "id": "cta_text",
          "label": "Button Text"
      },
      {
        "type": "range",
        "id": "recommended_products_count",
        "label": "Recommended products count",
        "min": 1,
        "max": 4,
        "step": 1,
        "default": 3
      }
    ]
  }
{% endschema %}
